require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ShortUrlsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # ShortUrl. As you add validations to ShortUrl, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { original_url: 'https://example.com' }
  end
  let(:invalid_attributes) do
    { original_url: 'example' }
  end

  let(:short_url) { create(:short_url) }

  describe 'GET #show' do
    it 'assigns the requested short_url as @short_url and redirects' do
      get :show, base62_id: short_url.base62_id
      expect(assigns(:short_url)).to eq(short_url)
      expect(response.status).to eq 301
    end

    context 'when given invalid base62_id' do
      it 'raises ActiveRecord::RecordNotFound' do
        expect do
          get :show, base62_id: 'not-a-valid-id'
        end.to raise_error ActiveRecord::RecordNotFound
      end
    end

    context 'when given base62_id that does not exist' do
      it 'raises ActiveRecord::RecordNotFound' do
        expect do
          get :show, base62_id: 'GGG'
        end.to raise_error ActiveRecord::RecordNotFound
      end
    end
  end

  describe 'GET #new' do
    it 'assigns a new short_url as @short_url' do
      get :new
      expect(assigns(:short_url)).to be_a_new(ShortUrl)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new ShortUrl' do
        expect do
          post :create, short_url: valid_attributes
        end.to change(ShortUrl, :count).by(1)
      end

      it 'assigns a new short_url as @short_url and created ShortUrl url to shortened_url' do
        post :create, short_url: valid_attributes
        expect(assigns(:short_url)).to be_a_new(ShortUrl)
        expect(assigns(:shortened_url))
          .to eq "http://test.host/#{ShortUrl.last.base62_id}"
      end

      it 're-renders the \'new\' template' do
        post :create, short_url: valid_attributes
        expect(response).to render_template('new')
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved short_url as @short_url' do
        post :create, short_url: invalid_attributes
        expect(assigns(:short_url)).to be_a_new(ShortUrl)
      end

      it 're-renders the \'new\' template' do
        post :create, short_url: invalid_attributes
        expect(response).to render_template('new')
      end
    end
  end
end
